// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: calling/message.proto

package calling

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on NotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uuid

	return nil
}

// NotificationRequestValidationError is the validation error returned by
// NotificationRequest.Validate if the designated constraints aren't met.
type NotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationRequestValidationError) ErrorName() string {
	return "NotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationRequestValidationError{}

// Validate checks the field values on NotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CreatedAt

	// no validation rules for Quota

	// no validation rules for ThingDisplayName

	// no validation rules for GatewayDisplayName

	// no validation rules for ZoneDisplayName

	// no validation rules for SecurityType

	// no validation rules for Mode

	// no validation rules for Status

	// no validation rules for Template

	// no validation rules for GatewayMacAddress

	// no validation rules for CustomerNumber

	// no validation rules for CanceledTime

	// no validation rules for CallingTotal

	// no validation rules for CallingComplete

	// no validation rules for MessageTotal

	// no validation rules for MessageComplete

	// no validation rules for IsComplete

	return nil
}

// NotificationResponseValidationError is the validation error returned by
// NotificationResponse.Validate if the designated constraints aren't met.
type NotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationResponseValidationError) ErrorName() string {
	return "NotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationResponseValidationError{}

// Validate checks the field values on CallingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CallingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetThing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallingRequestValidationError{
				field:  "Thing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallingRequestValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallingRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallingRequestValidationError{
				field:  "Zone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClientConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallingRequestValidationError{
				field:  "ClientConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CustomerNumber

	// no validation rules for MacAddress

	// no validation rules for ForceType

	if v, ok := interface{}(m.GetObserverConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallingRequestValidationError{
				field:  "ObserverConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CallingRequestValidationError is the validation error returned by
// CallingRequest.Validate if the designated constraints aren't met.
type CallingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallingRequestValidationError) ErrorName() string { return "CallingRequestValidationError" }

// Error satisfies the builtin error interface
func (e CallingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallingRequestValidationError{}

// Validate checks the field values on Thing with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Thing) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DisplayName

	// no validation rules for Name

	// no validation rules for Serial

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThingValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThingValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ThingValidationError is the validation error returned by Thing.Validate if
// the designated constraints aren't met.
type ThingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThingValidationError) ErrorName() string { return "ThingValidationError" }

// Error satisfies the builtin error interface
func (e ThingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThingValidationError{}

// Validate checks the field values on SimpleTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SimpleTemplate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// SimpleTemplateValidationError is the validation error returned by
// SimpleTemplate.Validate if the designated constraints aren't met.
type SimpleTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimpleTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimpleTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimpleTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimpleTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimpleTemplateValidationError) ErrorName() string { return "SimpleTemplateValidationError" }

// Error satisfies the builtin error interface
func (e SimpleTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimpleTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimpleTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimpleTemplateValidationError{}

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Property) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Value

	return nil
}

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}

// Validate checks the field values on ClientConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ClientConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CustomerNumber

	// no validation rules for Alias

	// no validation rules for Mobile

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Address1

	// no validation rules for Address2

	// no validation rules for Email

	if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Active

	if v, ok := interface{}(m.GetBirthDay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "BirthDay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Gender

	for idx, item := range m.GetPhones() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientConfigValidationError{
					field:  fmt.Sprintf("Phones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Weight

	// no validation rules for Height

	if v, ok := interface{}(m.GetEmergencySetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "EmergencySetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "Locale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClientConfigValidationError is the validation error returned by
// ClientConfig.Validate if the designated constraints aren't met.
type ClientConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientConfigValidationError) ErrorName() string { return "ClientConfigValidationError" }

// Error satisfies the builtin error interface
func (e ClientConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientConfigValidationError{}

// Validate checks the field values on EmergencySetting with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EmergencySetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Enabled

	return nil
}

// EmergencySettingValidationError is the validation error returned by
// EmergencySetting.Validate if the designated constraints aren't met.
type EmergencySettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmergencySettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmergencySettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmergencySettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmergencySettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmergencySettingValidationError) ErrorName() string { return "EmergencySettingValidationError" }

// Error satisfies the builtin error interface
func (e EmergencySettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmergencySetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmergencySettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmergencySettingValidationError{}

// Validate checks the field values on CustomerSetting with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CustomerSetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for IsAllowRegister

	if v, ok := interface{}(m.GetSmtp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerSettingValidationError{
				field:  "Smtp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerSettingValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Other

	return nil
}

// CustomerSettingValidationError is the validation error returned by
// CustomerSetting.Validate if the designated constraints aren't met.
type CustomerSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerSettingValidationError) ErrorName() string { return "CustomerSettingValidationError" }

// Error satisfies the builtin error interface
func (e CustomerSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerSettingValidationError{}

// Validate checks the field values on Locale with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Locale) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Timezone

	// no validation rules for Default

	// no validation rules for Current

	return nil
}

// LocaleValidationError is the validation error returned by Locale.Validate if
// the designated constraints aren't met.
type LocaleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocaleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocaleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocaleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocaleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocaleValidationError) ErrorName() string { return "LocaleValidationError" }

// Error satisfies the builtin error interface
func (e LocaleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocale.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocaleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocaleValidationError{}

// Validate checks the field values on Phone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Phone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for IsMaster

	// no validation rules for IsActive

	// no validation rules for IsMobile

	// no validation rules for IsSmsEnabled

	// no validation rules for IsCallEnabled

	// no validation rules for Timezone

	// no validation rules for CountryPrefix

	// no validation rules for FullNumber

	// no validation rules for IsCareTaker

	// no validation rules for Locale

	return nil
}

// PhoneValidationError is the validation error returned by Phone.Validate if
// the designated constraints aren't met.
type PhoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneValidationError) ErrorName() string { return "PhoneValidationError" }

// Error satisfies the builtin error interface
func (e PhoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneValidationError{}

// Validate checks the field values on CallingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CallingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for ErrorMessage

	// no validation rules for Error

	return nil
}

// CallingResponseValidationError is the validation error returned by
// CallingResponse.Validate if the designated constraints aren't met.
type CallingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallingResponseValidationError) ErrorName() string { return "CallingResponseValidationError" }

// Error satisfies the builtin error interface
func (e CallingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallingResponseValidationError{}

// Validate checks the field values on ModeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ModeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mode

	// no validation rules for GatewayMacAddress

	return nil
}

// ModeRequestValidationError is the validation error returned by
// ModeRequest.Validate if the designated constraints aren't met.
type ModeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModeRequestValidationError) ErrorName() string { return "ModeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ModeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModeRequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for Error

	// no validation rules for Sid

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on QuotaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuotaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CustomerNumber

	return nil
}

// QuotaRequestValidationError is the validation error returned by
// QuotaRequest.Validate if the designated constraints aren't met.
type QuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaRequestValidationError) ErrorName() string { return "QuotaRequestValidationError" }

// Error satisfies the builtin error interface
func (e QuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaRequestValidationError{}

// Validate checks the field values on QuotaResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuotaResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quota

	// no validation rules for CustomerNumber

	// no validation rules for Error

	return nil
}

// QuotaResponseValidationError is the validation error returned by
// QuotaResponse.Validate if the designated constraints aren't met.
type QuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaResponseValidationError) ErrorName() string { return "QuotaResponseValidationError" }

// Error satisfies the builtin error interface
func (e QuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaResponseValidationError{}

// Validate checks the field values on VoiceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SecurityType

	// no validation rules for FileName

	return nil
}

// VoiceRequestValidationError is the validation error returned by
// VoiceRequest.Validate if the designated constraints aren't met.
type VoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceRequestValidationError) ErrorName() string { return "VoiceRequestValidationError" }

// Error satisfies the builtin error interface
func (e VoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceRequestValidationError{}

// Validate checks the field values on VoiceResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xml

	return nil
}

// VoiceResponseValidationError is the validation error returned by
// VoiceResponse.Validate if the designated constraints aren't met.
type VoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceResponseValidationError) ErrorName() string { return "VoiceResponseValidationError" }

// Error satisfies the builtin error interface
func (e VoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceResponseValidationError{}

// Validate checks the field values on UpdateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateCallRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sid

	// no validation rules for From

	// no validation rules for To

	// no validation rules for CallStatus

	// no validation rules for ErrorMessage

	// no validation rules for DateCreated

	// no validation rules for DateUpdated

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Duration

	// no validation rules for ForwardedFrom

	// no validation rules for Price

	// no validation rules for PriceUnit

	// no validation rules for NotificationID

	// no validation rules for CallID

	// no validation rules for CallerCountry

	// no validation rules for ToCountry

	return nil
}

// UpdateCallRequestValidationError is the validation error returned by
// UpdateCallRequest.Validate if the designated constraints aren't met.
type UpdateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallRequestValidationError) ErrorName() string {
	return "UpdateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallRequestValidationError{}

// Validate checks the field values on UpdateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sid

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Status

	// no validation rules for ErrorMessage

	// no validation rules for DateSent

	// no validation rules for DateUpdated

	// no validation rules for Segments

	// no validation rules for Price

	// no validation rules for PriceUnit

	// no validation rules for NotificationID

	// no validation rules for MessageID

	return nil
}

// UpdateMessageRequestValidationError is the validation error returned by
// UpdateMessageRequest.Validate if the designated constraints aren't met.
type UpdateMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMessageRequestValidationError) ErrorName() string {
	return "UpdateMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMessageRequestValidationError{}

// Validate checks the field values on SMTPConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SMTPConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Password

	// no validation rules for Account

	return nil
}

// SMTPConfigValidationError is the validation error returned by
// SMTPConfig.Validate if the designated constraints aren't met.
type SMTPConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SMTPConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SMTPConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SMTPConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SMTPConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SMTPConfigValidationError) ErrorName() string { return "SMTPConfigValidationError" }

// Error satisfies the builtin error interface
func (e SMTPConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSMTPConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SMTPConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SMTPConfigValidationError{}

// Validate checks the field values on PaymentConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaymentConfig) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PaymentConfigValidationError is the validation error returned by
// PaymentConfig.Validate if the designated constraints aren't met.
type PaymentConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentConfigValidationError) ErrorName() string { return "PaymentConfigValidationError" }

// Error satisfies the builtin error interface
func (e PaymentConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentConfigValidationError{}
